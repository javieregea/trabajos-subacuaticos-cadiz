---
// Lazy loading wrapper component for heavy content
export interface Props {
  class?: string;
  threshold?: number;
}

const { class: className, threshold = 0.1 } = Astro.props;
---

<div class={`lazy-load ${className || ''}`} data-threshold={threshold}>
  <slot />
</div>

<script>
  // Intersection Observer for lazy loading
  const observerOptions = {
    rootMargin: '50px',
    threshold: 0.1
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const target = entry.target as HTMLElement;
        target.classList.add('loaded');
        observer.unobserve(target);
      }
    });
  }, observerOptions);

  // Observe all lazy-load elements
  document.querySelectorAll('.lazy-load').forEach(el => {
    observer.observe(el);
  });
</script>

<style>
  .lazy-load {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease, transform 0.6s ease;
  }

  .lazy-load.loaded {
    opacity: 1;
    transform: translateY(0);
  }
</style>